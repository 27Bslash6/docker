
server {
    listen 443 deferred http2 ssl; ## listen for ipv4; this line is default and implied
    listen [::]:443 deferred http2 ssl default ipv6only=on; ## listen for ipv6

    root /app/www;
    index index.html index.php;

    server_name example.com www.example.com;

    ssl on;

    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/ssl/example.com.dhparam.pem;

    # =========================================================================
    # ngx_pagespeed
    
    pagespeed on;

    pagespeed MapOriginDomain "http://example.com" "https://example.com";
    pagespeed LoadFromFile "https://example.com" "/app/www/";

    pagespeed RewriteLevel CoreFilters;
    #pagespeed RewriteLevel OptimizeForBandwidth;

    # Needs to exist and be writable by nginx.  
    # Use tmpfs (/dev/shm on Ubuntu) for best performance or filesystem to reduce memory footprint
    # pagespeed FileCachePath /dev/shm/ngx_pagespeed_cache;
    pagespeed FileCachePath /tmp/ngx_pagespeed_cache;

    # Ensure requests for pagespeed optimized resources go to the pagespeed handler
    # and no extraneous headers get set.
    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
        add_header "" "";
    }

    location ~ "^/pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" { }

    pagespeed XHeaderValue "";
    more_clear_headers x-page-speed;

    # =========================================================================

    location / {
        index index.html index.php;
        # First attempt to serve request as file, then as directory
        try_files $uri $uri/ @handler;
    }

    ## Common front handler for CMS such as Wordpress / Magento
    location @handler {
      rewrite / /index.php;
    }
    
    # PHP-FPM as FastCGI
    location ~ \.php$ {
      # Remove PHP version from response
      more_clear_headers x-powered-by;

      try_files $uri =404;
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_pass unix:/run/php/php7.0-fpm.sock;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param SCRIPT_NAME $fastcgi_script_name;
      fastcgi_index index.php;
      include fastcgi_params;
    }

    # Cache static for 30d
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        expires 30d;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        # log_not_found off;
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
      deny all;
    }
    
    location php.ini {
        return 404;
    }

    # Enable ocsp stapling
    # OSCP is a mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, 
    # scalable manner
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    #
    # resolver 8.8.4.4 8.8.8.8;
    # resolver_timeout 10s;
    # ssl_stapling on;
    # ssl_trusted_certificate /etc/nginx/ssl/trusted_certificate.pem;

    # HSTS (HTTP Strict Transport Security) 
    # https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    #
    #  ** ONLY ENABLE WHEN -EVERYTHING- TESTS OKAY **
    #
    # add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # enabling Public Key Pinning Extension for HTTP (HPKP)
    # https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning
    # to generate use one of these:
    # $ openssl rsa  -in my-website.key -outform der -pubout | openssl dgst -sha256 -binary | base64
    # $ openssl req  -in my-website.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
    # $ openssl x509 -in my-website.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
    #
    # add_header Public-Key-Pins 'pin-sha256="base64+info1="; max-age=31536000' always;
    
}