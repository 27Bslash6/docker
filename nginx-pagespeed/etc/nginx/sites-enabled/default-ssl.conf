server {
    listen  443 deferred http2 ssl;
    listen  [::]:443 deferred http2 ssl default ipv6only=on;

    server_name example.com www.example.com -;

    root /app/www;

    index index.html;

    ssl on;

    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    ssl_dhparam /etc/nginx/ssl/example.com.dhparam.pem;

    # OSCP
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    #
    # resolver 8.8.4.4 8.8.8.8;
    # resolver_timeout 10s;
    # ssl_stapling on;
    # ssl_trusted_certificate /etc/nginx/ssl/trusted_certificate.pem;

    # HSTS
    # https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    #
    #  ** ONLY ENABLE WHEN -EVERYTHING- TESTS OKAY **
    #
    # add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # Public Key Pinning Extension for HTTP (HPKP)
    # https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning
    # to generate use one of these:
    # $ openssl rsa  -in my-website.key -outform der -pubout | openssl dgst -sha256 -binary | base64
    # $ openssl req  -in my-website.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
    # $ openssl x509 -in my-website.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
    #
    # add_header Public-Key-Pins 'pin-sha256="base64+info1="; max-age=31536000' always;

    include server.d/*.conf;

}
