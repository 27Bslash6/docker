server {
	listen   80; ## listen for ipv4; this line is default and implied
	listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root /app/www;
	index index.php index.html index.htm;

  # server_name example.com;

  # =========================================================================
    # ngx_pagespeed
    
    pagespeed on;

    pagespeed RewriteLevel CoreFilters;
    #pagespeed RewriteLevel OptimizeForBandwidth;

    # Needs to exist and be writable by nginx.  
    # Use tmpfs (/dev/shm on Ubuntu) for best performance or filesystem to reduce memory footprint
    # pagespeed FileCachePath /dev/shm/ngx_pagespeed_cache;
    pagespeed FileCachePath /tmp/ngx_pagespeed_cache;

    # Ensure requests for pagespeed optimized resources go to the pagespeed handler
    # and no extraneous headers get set.
    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
        add_header "" "";
    }

    location ~ "^/pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" { }

    pagespeed XHeaderValue "";

    # =========================================================================

    location / {
        index index.html index.php;
        # First attempt to serve request as file, then
        # as directory, then fall back to index.html
        try_files $uri $uri/ @handler;
    }

    ## Common front handler for CMS such as Wordpress / Magento
    location @handler { 
      rewrite / /index.php;
    }
    
    
    location ~ \.(hh|php)$ {
        fastcgi_keep_conn on;
        fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_pass   unix:/var/run/hhvm/hhvm.sock;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }

    # Cache static for 30d
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        expires 30d;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        # log_not_found off;
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.(hh|php)$ {
      deny all;
    }
    
    location php.ini {
        return 404;
    }

}
